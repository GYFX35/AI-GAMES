from fastapi import APIRouter, Request, Depends
from pydantic import BaseModel, Field
from typing import Optional

# It's good practice to have a router for each feature
router = APIRouter()

# Pydantic model for Monetag postback query parameters.
# The field names match the macros available from Monetag.
# See https://docs.monetag.com/docs/postbacks/macroses/
class MonetagPostbackData(BaseModel):
    # This is a custom ID you can pass to the ad call.
    # Useful for tracking users or sessions.
    ymid: Optional[str] = None

    # The amount of revenue generated by the ad impression.
    sum: Optional[float] = None

    # The currency of the revenue.
    currency: Optional[str] = None

    # The ID of the ad zone.
    zone_id: Optional[int] = Field(None, alias='zone')

    # A custom variable you can set to track ad placements.
    request_var: Optional[str] = Field(None, alias='requestvar')

    # Telegram user ID, if available
    telegram_user_id: Optional[str] = Field(None, alias='telegram_user_id')


@router.get("/postback")
async def monetag_postback(params: MonetagPostbackData = Depends()):
    """
    Endpoint to receive S2S (server-to-server) postbacks from Monetag.

    You need to configure this URL in your Monetag account settings.
    For example: https://your-api.com/api/monetag/postback?ymid=...&sum=${SUM}&...

    This endpoint will be called by Monetag's servers when a monetizable
    event occurs (e.g., a user watches a rewarded ad).
    """
    print(f"Received Monetag postback for ymid: {params.ymid}")
    print(f"Revenue: {params.sum} {params.currency}")
    print(f"Zone ID: {params.zone_id}")
    print(f"Request Var: {params.request_var}")

    # --- Business Logic ---
    # Here, you would typically:
    # 1. Validate the postback (e.g., check source IP if possible).
    # 2. Look up the user or session associated with `params.ymid`.
    # 3. Credit the user's account with the reward (`params.sum`).
    # 4. Log the transaction for analytics.
    #
    # For this example, we'll just print the data.

    # Monetag's servers expect a 200 OK response to confirm
    # that the postback was received successfully.
    return {"status": "ok", "message": "Postback received"}